apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'io.digdag.plugin'
version = '0.1.0'

def digdagVersion = '0.9.4'
def jacksonVersion = "2.9.10"
def jacksonDatabindVersion = "2.9.10"
def guavaVersion = "19.0"


repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://dl.bintray.com/digdag/maven'
    }
}

configurations {
    provided
}

dependencies {
    provided ('io.digdag:digdag-plugin-utils:0.9.3') { // this should be 'compile' once digdag 0.8.2 is released to a built-in repository {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'javax.inject', module: 'javax.inject'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
    provided files('./libs/digdag-standards-0.10.0-SNAPSHOT.jar')

    provided 'io.fabric8:kubernetes-client:4.6.2'
    provided "com.google.guava:guava:19.0"
    provided "javax.inject:javax.inject:1"
    provided "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    provided "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    provided "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // artifactId 'project1-sample'
            from components.java
        }
    }
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

javadoc {
    options {
        locale = 'en_US'
        encoding = 'UTF-8'
    }
}
